// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// DCTdenoising
Rcpp::NumericMatrix DCTdenoising(Rcpp::NumericMatrix ipixelsR, int width, int height, double sigma, int flag_dct16x16);
RcppExport SEXP _imagerExtra_DCTdenoising(SEXP ipixelsRSEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP sigmaSEXP, SEXP flag_dct16x16SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ipixelsR(ipixelsRSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type flag_dct16x16(flag_dct16x16SEXP);
    rcpp_result_gen = Rcpp::wrap(DCTdenoising(ipixelsR, width, height, sigma, flag_dct16x16));
    return rcpp_result_gen;
END_RCPP
}
// piecewise_transformation
Rcpp::NumericVector piecewise_transformation(Rcpp::NumericVector data, Rcpp::NumericVector F, int N, double smax, double smin, double max, double min, double max_range, double min_range);
RcppExport SEXP _imagerExtra_piecewise_transformation(SEXP dataSEXP, SEXP FSEXP, SEXP NSEXP, SEXP smaxSEXP, SEXP sminSEXP, SEXP maxSEXP, SEXP minSEXP, SEXP max_rangeSEXP, SEXP min_rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type F(FSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type smax(smaxSEXP);
    Rcpp::traits::input_parameter< double >::type smin(sminSEXP);
    Rcpp::traits::input_parameter< double >::type max(maxSEXP);
    Rcpp::traits::input_parameter< double >::type min(minSEXP);
    Rcpp::traits::input_parameter< double >::type max_range(max_rangeSEXP);
    Rcpp::traits::input_parameter< double >::type min_range(min_rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(piecewise_transformation(data, F, N, smax, smin, max, min, max_range, min_range));
    return rcpp_result_gen;
END_RCPP
}
// screened_poisson_dct
Rcpp::NumericMatrix screened_poisson_dct(Rcpp::NumericMatrix data, double L);
RcppExport SEXP _imagerExtra_screened_poisson_dct(SEXP dataSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(screened_poisson_dct(data, L));
    return rcpp_result_gen;
END_RCPP
}
// saturateim
Rcpp::NumericVector saturateim(Rcpp::NumericVector data, double max_im, double min_im, double max_range, double min_range);
RcppExport SEXP _imagerExtra_saturateim(SEXP dataSEXP, SEXP max_imSEXP, SEXP min_imSEXP, SEXP max_rangeSEXP, SEXP min_rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type max_im(max_imSEXP);
    Rcpp::traits::input_parameter< double >::type min_im(min_imSEXP);
    Rcpp::traits::input_parameter< double >::type max_range(max_rangeSEXP);
    Rcpp::traits::input_parameter< double >::type min_range(min_rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(saturateim(data, max_im, min_im, max_range, min_range));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_imagerExtra_DCTdenoising", (DL_FUNC) &_imagerExtra_DCTdenoising, 5},
    {"_imagerExtra_piecewise_transformation", (DL_FUNC) &_imagerExtra_piecewise_transformation, 9},
    {"_imagerExtra_screened_poisson_dct", (DL_FUNC) &_imagerExtra_screened_poisson_dct, 2},
    {"_imagerExtra_saturateim", (DL_FUNC) &_imagerExtra_saturateim, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_imagerExtra(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
